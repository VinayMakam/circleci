version: 2.1
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
orbs:
  python: circleci/python@1.2

jobs:
  # This is the name of the job, feel free to change it to better match what you're trying to do! 
  run_tests:
    # These next lines defines a docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    parallelism: 2
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.      
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip      
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}      
      # - run:
      #     name: Install Python dependencies
      #     command: |
      #       echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV && source $BASH_ENV
      #       pip install --user -r requirements.txt
      - run:
          name: Run unit tests
          command: |
            pytest --junitxml=test-reports/junit.xml --html=test-reports/pytest_report.html --self-contained-html
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
workflows:
  # This is the name of the workflow, feel free to change it to better match your workflow.
  build_test:
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - run_tests